# https://blog.kelte.cc/ctf/writeup/2020/05/24/m0lecon-ctf-2020-teaser-king-exchange.html
# https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.66.8688&rep=rep1&type=pdf
import gmpy2
from sage.rings.finite_rings.integer_mod import square_root_mod_prime
p = 62471552838526783778491264313097878073079117790686615043492079411583156507853

# coordinates reversed
g = (34510208759284660042264570994647050969649037508662054358547659196695638877343, 4603880836195915415499609181813839155074976164846557299963454168096659979337)
A = (929134947869102207395031929764558470992898835457519444223855594752208888786, 6062966687214232450679564356947266828438789510002221469043877962705671155351)
B = (49232075403052702050387790782794967611571247026847692455242150234019745608330, 46585435492967888378295263037933777203199027198295712697342810710712585850566)
enc_flag = b' \xe9\x1aY.+E\xac\x1b\xc41\x1c\xf7\xba}\x80\x11\xa8;%]\x93\x88\x1fu\x87\x91\x88\x87\x88\x9b\x19'

D = -1
xD = gmpy2.jacobi(D, p)
# case 2
assert xD == 1

t = square_root_mod_prime(Mod(D, p), p)

g_K = g[1] - t * g[0]
B_K = B[1] - t * B[0]

bob_secret = discrete_log(Mod(B_K, p), Mod(g_K, p))
print(bob_secret)
