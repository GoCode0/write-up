import re

import pgpy
import six
from pgpy.constants import (CompressionAlgorithm, HashAlgorithm, KeyFlags,
                            PubKeyAlgorithm, SymmetricKeyAlgorithm)
from pgpy.packet.fields import RSAPriv
from pgpy.packet.types import MPI
from pgpy.types import Fingerprint


# patch key generation
def _generate(self, key_size):
    self.n = MPI(

    )
    self.p = MPI(
        29744852921750395852177676680292066671820495687136888108096508893203491942637147343551799689693664653259007373433791037425728778224173365509791779887290809142920144819674870373275430712448703361905983597846797387762906666277941386571382908714150785660711576547307811219205893261700284215758415894351295659903386066244937658808351285466299672435006784349275884273945613760156358976112095492725658206988647501245026096378843639142062065676897125787995945129505916841144828713618912909772875408696949848904017362592191909912812317341827736766300875495158076255297697281290900829316341222138933663640294520594438741062839
    )
    self.q = MPI(
        24387458115324849955283813354471656178595096688278476566844787318407335967858060353197284716853650650072921789312630321425618966923772517448474438273767092012290328572064242224659341809941787338098736207279668314015590913311598325967584728107469142763585603819575477492823417129115799724096364868418469524569960203533345465396504010820567257832425885422095520612169948685363800252708609227360529814010483041249006591437536701837624639135166378449090272859569940743117993477496758112981550259270036633586302150066276982835880617666672299776556512680100555645878318203987426440692438648893136953524242064075838523505493
    )
    self.d = MPI(

    )
    self.e = MPI(65537)
    self.u = MPI(
        9786273400697968928251196444552355005099488441989338536314940367122372167309875498568976850016698553511915562779768045497586979952095701492579896490592816759174701353549494432927134830733742850132615954771836616310660039910605496718766725095718066515669687590063850277517588408705880100723348625439909883851152909355579913905965906198410023744385717656009128576795837862881813772930093998124780752166922720777070278231147287801072750735781342087124977593230819153791565018609467518331172315376549255830204942245003861457862351154728005503340873563755638509239249420999924969347322667909746799157031489958072840559557
    )
    self._compute_chksum()


RSAPriv._generate = _generate


key = pgpy.PGPKey.new(PubKeyAlgorithm.RSAEncryptOrSign, 4096)

uid = pgpy.PGPUID.new(
    "epfl-ctf-admin2@protonmail.com", email="epfl-ctf-admin2@protonmail.com"
)

key.add_uid(
    uid,
    usage={
        KeyFlags.Certify,
        KeyFlags.Sign,
        KeyFlags.EncryptCommunications,
        KeyFlags.EncryptStorage,
    },
    hashes=[HashAlgorithm.SHA256, HashAlgorithm.SHA512, HashAlgorithm.SHA1],
    ciphers=[
        SymmetricKeyAlgorithm.AES256,
        SymmetricKeyAlgorithm.AES128,
        SymmetricKeyAlgorithm.AES192,
        SymmetricKeyAlgorithm.CAST5,
        SymmetricKeyAlgorithm.TripleDES,
    ],
    compression=[
        CompressionAlgorithm.ZLIB,
        CompressionAlgorithm.ZIP,
        CompressionAlgorithm.Uncompressed,
    ],
)

# patch fingerprint
FINGERPRINT_ENCODED = "2461 439C 55F8 627A"


def __new__(cls, content):
    if isinstance(content, Fingerprint):
        return content

    # validate input before continuing: this should be a string of 40 hex digits
    content = content.upper().replace(" ", "")
    if not bool(re.match(r"^[A-F0-9]{40}$", content)):
        raise ValueError("Expected: String of 40 hex digits")

    # store in the format: "AAAA BBBB CCCC DDDD EEEE  FFFF 0000 1111 2222 3333"
    #                                               ^^ note 2 spaces here
    spaces = [" " if i != 4 else "  " for i in range(10)]
    chunks = ["".join(g) for g in six.moves.zip_longest(*[iter(content)] * 4)]
    content = "".join(
        j for i in six.moves.zip_longest(chunks, spaces, fillvalue="") for j in i
    ).strip()

    content = content[:-19] + FINGERPRINT_ENCODED

    return str.__new__(cls, content)


Fingerprint.__new__ = __new__
msg_enc = pgpy.PGPMessage.from_file("msg.enc")

msg = key.decrypt(msg_enc)

flag = msg.message
print(flag)
