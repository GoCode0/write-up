#!/usr/bin/env sage
from http import HTTPStatus

import requests

url = "http://nobus101.insomnihack.ch:13337"

# url = "http://localhost:13337"

"""
     NOBUS 101 - CTF Insomnihack 2022
     --------------------------------

      GET /prng - return two random values
     POST /flag - submit the next value that will be generated by the PRNG and get the flag

     Examples:

     $ curl http://localhost:13337/prng
     88bb6ab83d9f2ff423f37bd417923038d8a377916f7a62183e911407ff27
     044630dbec4b71cb0a438c9f1c55e239a1d46b27b8583ae986e6e857e99b

     $ curl -d "662e194be250f360dfce1c853caf2f4b27ad0b5b118f20ef927581df8e71" http://localhost:13337/flag
     INS{XXX}

"""


def prng():
    res = requests.get(url + "/prng")
    assert res.status_code == HTTPStatus.OK
    [a, b] = [int(x, 16) for x in res.text.strip().split()]
    return a, b


def get_flag(rand):
    res = requests.post(url + "/flag", data=rand)
    print(res.text)
    assert res.status_code == HTTPStatus.OK
    return res.text


# https://github.com/sibears/IDAGolangHelper

# curve P-256
p = 115792089210356248762697446949407573530086143415290314195533631308867097853951
A = -3
B = 41058363725152142129326129780047268409114441015993725554835256314039467401291
PR = IntegerModRing(p)
EC = EllipticCurve(PR, [A, B])
n = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551

P = EC(
    0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
    0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5,
)

prev, next = prng()
print(f"[+] prev = {hex(prev)}")
print(f"[+] next = {hex(next)}")


d = 0x132867E88E82431DC40BA24E11BF3EC7FFB18764A3B4DF1F5957FD5F37D8BE40
Q = d * P

dinv = int(pow(d, -1, n))

out_ = prev
check = next >> (8 * 28)

for i in range(2 ** 16):
    if i % 1000 == 0:
        print(i)
    guess = out_ + (i << (30 * 8))
    x = PR(guess)
    if EC.is_x_coord(x):
        sQ = EC.lift_x(x)
        # A = dinv * s * Q = s * P
        A = dinv * sQ
        s = Integer(A[0])
        B = s * Q
        r = Integer(B[0]) & ((2 ** (8 * 30)) - 1)
        r_ = r >> (8 * 28)
        if r_ == check and r == next:
            print(i)
            seed = s
            print(hex(r))
            print(hex(next))
            assert r == next
            break


print(f"[+] seed = {hex(seed)}")


class RNG:
    def __init__(self, seed, P, Q):
        self.seed = seed
        self.P = P
        self.Q = Q

    def next(self):
        t = self.seed
        s = (t * self.P)[0].lift()
        self.seed = s
        r = (s * self.Q)[0].lift()
        return r & (2 ** (8 * 30) - 1)


rng = RNG(seed, P, Q)

result = "{:x}".format(rng.next())
print(result)

flag = get_flag(result).strip()
assert flag == "INS{7ru57_7h3_5c13nc3}"
print(flag)
